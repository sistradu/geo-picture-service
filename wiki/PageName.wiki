#summary Projektplan für die Implementierungsphase
#labels Phase-Design

= Komponentenverantwortlichkeiten =

Hier die Tabelle mit der Zuordnung der Themen zum jeweiligen Bearbeiter.

|| *Thema* || *Bearbeiter* || *Fortschritt in %* || *Testabdeckung* || *Kommentar* ||
|| Funktionsklassen: CoordinateCalculator + ImageDataExtractor || Stefan || 100% || 100% || ||
|| DB-Mock-Klasse || Markus || 100% || 100% ||  ||
|| YAML || Martin || 50% || manuelle Test || Container in einem xhtml-Template aufgebaut ; CSS-Gestaltung fehlt noch ||
|| Breadcrumb + Menü || Rico || 75% || 0% || Menü ist soweit fertig. Breadcrumb soweit auch. Design kann erst nach Seitendesign gemacht werden. ||
|| *Views und Controller* || || || ||
|| Startseite mit Login und Nutzerverwaltung || Stefan || 80% || 75% || Tests für Mailversenden leider nicht möglich, da dort der Facescontext verwendet wird. Dieser ist bei JUnit allerdings "null". Es fehlen außerdem noch, Validatoren und die Tests dazu. Bisher wird auch nur der MockNutzerConnector verwendet.||
|| Album erstellen/bearbeiten || Stefan || 10% || 0% || ||
|| Bild bearbeiten || Martin || || || ||
|| Album Übersicht || Martin || || || ||
|| Eigene Alben anzeigen || Rico || 0% || 0% || Möglicherweise unnötig, da man es vllt auch bei Album-Übersicht mit reinmachen kann ||
|| Album betrachten || Rico || 0% || 0% || TODO 4.5. ||
|| DB-Anbindung || Markus || 10% || 0% || Simple GET-Requests funktionieren problemlos, es fehlen noch PUT und evt. POST-Requests und alle benötigten Queries ||

Wer noch etwas ändern möchte, kann das gern hier eintragen. (Bitte vorher absprechen!)

= Details für die Controller =

*Startseite/Login/Nutzerverwaltung:*
 * Scope: Session
 * Attribute:
   || *Attributname* || *Typ* || *Info* ||
   || nutzerID || Integer || ||
   || nutzerName || String || ||
   || email || String || ||
   || eingeloggt || boolean || ||
   || passwort || String || MD5-Hash ||
*Album erstellen/bearbeiten:*
 * Scope: Request
 * Attribute:
   || *Attributname* || *Typ* || *Info* ||
   || albumID || Integer || ||
   || albumName || String || ||
   || albumDescription || String || maximal 200 Zeichen o.ä. ||
   || passwort || String || generiert + MD5-Hash ||

*Bild bearbeiten:*
 * Scope: Request
 * Attribute:
   || *Attributname* || *Typ* || *Info* ||
   || bildID || Integer || ||
   || bildName || String || ||
   || beschreibung || String || maximal 200 Zeichen o.ä. ||
   || öffentlich|| boolean || ||
   || timestamp || Date/Calendar || Format: yyyy-MM-dd ||
   || location-file || String || latitude(-decimal)/longitude(-decimal)/altitude/direction ||

*Album Übersicht und Suche:*
 * Scope: Request
 * Attribute:
   || *Attributname* || *Typ* || *Info* ||
   || sucheNach || String || Was wird gesucht (Benutzer,Name,...) ||
   || suchString || String || Wert nach dem gesucht wird ||
   || alben || List<Album> || Alle bzw. gefundene Alben zum anzeigen ||

*Eigene Alben anzeigen:*
 * Scope: Request
 * Attribute:
   || *Attributname* || *Typ* || *Info* ||
   || alben || List<Album> || Alle Alben des angemeldeten Nutzers (benötigt Login) ||

*Album betrachten:*
 * Scope: Request
 * Attribute:
   || *Attributname* || *Typ* || *Info* ||
   || bilder || List<Bild> || Alle Bilder des Albums, benötigt Passwort oder eingeloggter Nutzer = Albumbesitzer zum anzeigen privater Bilder ||

= Navigation =
Das folgende Bild zeigt die Navigation durch die Seiten. Die gelb Umrandeten kommen ins Menü und sind damit von überall erreichbar.

Außerdem sind auch die Benennung der Seiten zu erkennen.

[http://geo-picture-service.googlecode.com/files/navigation.png]